//*************************   Misc Menu Stuff  **********************************************

OnMiscMenu{
	"\0\s[0]\b2Here are a bunch of features that don't really fit in another category!\n\n[half]"
	
	--
		
	"\![*]\q[Stats,statdisplay]\n/
	\![*]\q[Mameshiba,mameshibatalk]\n/
	\![*]\q[8ball,On8balltime,2]\n/
	\![*]\q[Weather,OnCheckWeather]\n\n[half]"
	--
	"\![*]\q[Back to the main menu,OnBACKTOMENU]\e"

}

//god i cnat stand the english language
Select.statdisplay{

	if pomosdone == 1 {
	"\0\s[0]\b2\_qStatistics\n\n[half]You've done \f[bold,true]%(pomosdone)\f[bold,false] work session.\n\n[half]"
	} 
	else {
	"\0\s[0]\b2\_qStatistics\n\n[half]You've done \f[bold,true]%(pomosdone)\f[bold,false] work sessions.\n\n[half]"
	}
	
	--
	if auroraboop == 1{
	
		"You've poked Aurora \f[bold,true]%(auroraboop)\f[bold,false] time\n\n[half]"
		"You've booped Aurora \f[bold,true]%(auroraboop)\f[bold,false] time\n\n[half]"
	} 
	else {
		"You've poked Aurora \f[bold,true]%(auroraboop)\f[bold,false] times\n\n[half]"
		"You've booped Aurora \f[bold,true]%(auroraboop)\f[bold,false] times\n\n[half]"
	}

	--
	
	if aurorapet == 1 {
	"You've pet Aurora \f[bold,true]%(aurorapet)\f[bold,false] time\n\n[half]"
	} 
	else {
	"You've pet Aurora \f[bold,true]%(aurorapet)\f[bold,false] times\n\n[half]"
	}

	--
	/*if AP == 1 {
	"You have \f[bold,true]1\f[bold,false] AP (Aurora Point)\n\n[half]"
	}
	else {
	"You have \f[bold,true]%(AP)\f[bold,false] AP (Aurora Points)\n\n[half]"
	}*/
	--
	"\0\s[0]Back to...\n\n[half]"
	--
	"\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\e"

}

Select.mameshibatalk{
	
	"\0\s[0]Eh\w2.\w2.\w2.\w2? There's something on your desktop...\w8\n\n[half]\i5\f[bold,true]You found a %(mameshibachara) shiba!\f[bold,false]\x\c" 
	--
	"\0\s[2]A bean dog???\n\n[half]\w8\i5\f[bold,true]The Mameshiba is saying something...\f[bold,false]\w8\n\n[half]\0\s[8]...!\n\n[half]\w8\i5\f[bold,true]Hey, did you know?\w8 %(mameshibafact)\f[bold,false]\x\c"

	--
	
	"\0\s[3]Er... that's great.\n\n[half]"
	
	"\0\s[3]Well... that's delightful.\n\n[half]"
	
	"\0\s[3]G-good to know, I guess...\n\n[half]"

	--
	"\_qBack to...\n\n[half]"
	--
	"\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\e"

}


On8balltime{
	
	if reference0 == 2 {
	
		"\0\s[8]You want to ask the magic 8 ball a question?\w8\s[0] Sure, just make sure it's a yes/no one.\![open,inputbox,OnInput8ball,-1]\e"
		
	} else {
		
		"\0\s[0]Go ahead and type in a yes/no question.\![open,inputbox,OnInput8ball,-1]\e"
		
	}

}

//surfaces: 11 is neutral, 12 is happy, 13 is upsetti
OnInput8ball{
	
	"\0\s[11]\i5Aurora shakes the magic 8 ball and looks at the reply.\n\n[half]"
	
	--
	//positive
	"\s[12]'It is certain'"
    "\s[12]'Without a doubt'"
    "\s[12]'Yes, definitely'"
    "\s[12]'It is decidedly so'"
    "\s[12]'As I see it, yes'\w4 \s[11]...I mean, can it see?\w6 It's a plastic ball?"
    "\s[12]'Most likely'\w4 ...So a 90% chance of sunshine?"
    "\s[12]'Yes'"
    "\s[12]'Outlook good'"
    "\s[12]'Signs point to yes'\w4 \s[11]...What signs, though?"
    
	//neutral
	"\s[11]'Reply hazy, try again'\w4 ...I guess you should ask that again."
    "\s[11]'Better not tell you now'\w4 Huh, that's kind of ominous..."
    "\s[11]'Ask again later'\w4 Give it a few minutes to make up its mind"
    "\s[11]'Cannot predict now'\w4 Check back on it later."
    "\s[11]'Concentrate and ask again'\w4 Hmm... maybe try again?"
	
	//negative
	"\s[13]'Don’t count on it'"
    "\s[13]'Outlook not so good'"
    "\s[13]'My sources say no'\w4 ...What sources??\w6 It's a plastic ball."
    "\s[13]'Very doubtful'\w4 ...Well, it's not a no for sure..."
    "\s[13]'My reply is no'"

	--
	"\x\c\b2Well, do you want to ask another question?\n\n[half]\_q"
	--
	"\![*]\q[Ask the 8ball,On8balltime]\n\n[half]"
	--
	"Nah, back to...\n\n[half]"
	--
	"\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\e"
	
}

//Weather Checking -------------------------------------------------------

//functions for scraping weather.com for weather data.
//author: vita @yuyudev on twitter
//referenced zarla's hunter and smoker ghost, and https://forum.rainmeter.net/viewtopic.php?t=34470
//
//please add the following variables to your bootend dic
//curlocation = ""
//locationcode = ""


OnCheckWeather
{
	"\0\s[5]\b[2]\_qWanna check the weather? No problem!\n\n\f[bold,1]Current Location:\f[bold,0] %(curlocation)\n\n"
	--
	//if first time opening there will be no location so user needs to set location b4 anything else. except moon phase
	
	if (locationcode == ""){
	
	"\![*]\q[Set Location,OnWeatherLocation]\n/
	\![*]\q[Check Moon Phase,OnDownloadMoonPhase]\n\n[half]"
	
	
	} else {
	
	"\![*]\q[Set Location,OnWeatherLocation]\n/
	\![*]\q[Check Current Weather,OnDownloadCurWeather]\n/
	\![*]\q[Check 10 Day Forecast,OnDownloadForecast]\n/
	\![*]\q[Check Hourly Forecast,OnDownloadHourly]\n/
	\![*]\q[Check Moon Phase,OnDownloadMoonPhase]\n\n[half]"
	
	}
	--
	"Nevermind, back to...\n\n[half]"
	--
	"\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\e"

}
	
OnWeatherLocation
{

	"\0\s[8]First, I need to know where you are. Are you in the USA or not?\n\n"

	--
	"\![*]\q[USA,OnUSALoc]\n/
	\![*]\q[Outside the USA,OnOtherLoc]\n\e"


}

OnUSALoc{

	"\0\s[5]Alright! Just let me know your zipcode!\![open,inputbox,OnLocCode,-1]"
}

OnOtherLoc{

	"\0\s[8]This gets a little more complicated. Please go to weather.com, search your city, and give me the long series of letters and numbers at the end of the URL.\![open,inputbox,OnLocCode,-1]"

}


OnLocCode
{
locationcode = reference0
OnDownloadCurWeather
}

OnDownloadCurWeather
{
	"\0\s[0]Downloading weather... \![execute,http-get,https://weather.com/weather/today/l/%(locationcode),--async=OnCurWeatherFound,--file=weather.html,--timeout=200]"

}

OnCurWeatherFound
{
	
	//initialize variables 
	_file = "var\\weather.html"
	_buff=""
	_regtemp = ''
	_regdegree = ''
	_regfeels = ''
	_reghumidity = ''
	_regwind = ''
	_regstate = ''
	_regloc = ''
	_regpollen = ''
	FCHARSET(1)
	//array to hold current weather data
	//[temp, degrees, feels like temp, humidity, wind, state (cloudy, rainy, etc), pollen alert (yes/no)]
	currentweatherarray = ("","","","","","","")
	
	--
	
	if FOPEN(_file,'r') {
	
		_buff = FREAD(_file) //get the first line of the HTML to check what type of page we got
		temp = _buff
		
		if RE_SEARCH(_buff, '<html dir="ltr" lang="en-US"><head>') { //reg expressions for chrome formatted page
			_regtemp = 'CurrentConditions--tempValue--[\d|\w|_|-]*">(-?\d*)°</span><div'
			_regdegree = '(°C|°F)'
			_regfeels = 'feelsLikeTempValue--[\d|\w|_|-]*">(-?\d*)°</span><span data'
			_reghumidity = 'estid="PercentageValue">(\d*)%</span></div>'
			_regwind = '44z"></path></svg>([\w|\s|\d]*)</span></div></div>'
			_regstate = 'phraseValue--[\d|\w|_|-]*">([\w|\s]*)</div></div>'
			_regloc = 'Conditions--location--[\d|\w|_|-]*">(.*) Weather</h1><div class='
			_regpollen = 'iesListItem--description--[\d|\w|_|-]*">([\w|\s]*) pollen is very high in your area</p></'
		}
		else { 
		//reg expressions for firefox formatted page 
			_regtemp = '<div class="today_nowcard-temp"><span class="">(-?\d*)<sup>'
			_regdegree = '(°C|°F)'
			_regfeels = '<span class="btn-text">Feels Like<!----> </span><span class="deg-feels" className="deg-feels">(-?\d*)<sup>'
			_reghumidity = '</tr><tr><th>Humidity</th><td><span class=""><span>(\d*)<span class="Percentage__percentSymbol__2Q_AR">%'
			_regwind = '<tr><th>Wind</th><td><span class="">([\w|\s|\d]*)</span></td></tr><tr><th>'
			_regstate = '<div class="today_nowcard-phrase">([\w|\s]*)'
			_regloc = 'className="h4 today_nowcard-location">(.*)<span class="icon icon-font iconset-social icon-share-circle" className="icon icon-font iconset-social icon-share-circle"></span>'
			_regpollen = ' title="Local Pollen Alert"'
		}

		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
			

			//current temp
			if RE_SEARCH ( _buff, _regtemp ) {
				
				currentweatherarray[0] = RE_GETSTR[1]
				
			} 
	
			//degrees (F or C)
			if RE_SEARCH ( _buff, _regdegree ) {
				currentweatherarray[1] = RE_GETSTR[1]
				
			} 
			
			//feels like temp
			if RE_SEARCH ( _buff, _regfeels ) {
				currentweatherarray[2] = RE_GETSTR[1]
				
			} 
			
			//humidity
			if RE_SEARCH ( _buff, _reghumidity ) {
				currentweatherarray[3] = RE_GETSTR[1]
				
			} 
			
			//wind
			if RE_SEARCH ( _buff, _regwind) {
				currentweatherarray[4] = RE_GETSTR[1]
				
			} 
			
			
			//state (cloudy, sunny, etc)
			if RE_SEARCH ( _buff, _regstate ) {
				
				currentweatherarray[5] = RE_GETSTR[1]
				
			} 
			
			//set location
			if RE_SEARCH ( _buff, _regloc ) {
				
				curlocation = RE_GETSTR[1]
				
			} 
			
			//search for pollen stuff
			if RE_SEARCH ( _buff, _regpollen ) {
				
				currentweatherarray[6] = "Local Pollen Alert"
				
			} 
			
		}
	}
	--
	
	FCLOSE(_file);
	
	if (intalkconfig) {
	
		intalkconfig = 0
		TalkConfig
		--
		"\e"
	
	}
	--
	if weatherquiet {
		weatherquiet = 0
		--
		"\e"
	}
	
	--
	"\0\s[8]\_qRight now...\n\n[half]Temperature: %(currentweatherarray[0])%(currentweatherarray[1])\nFeels like: %(currentweatherarray[2])%(currentweatherarray[1])/
	\nHumidity: %(currentweatherarray[3])%\nWind: %(currentweatherarray[4])\nWeather: %(currentweatherarray[5])"
	--
	if currentweatherarray[6] == "Local Pollen Alert" {
	"\nThere's a local pollen alert!"
	} 
	--
	"\n\n[half]Back to...\n\n[half]"
	--
	"\![*]\q[Weather menu,OnCheckWeather]\n/
	\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\e"

}

OnDownloadForecast{

	"\0\s[0]Downloading forecast... \![execute,http-get,https://weather.com/weather/tenday/l/%(locationcode),--async=OnForecastFound,--file=forecast.html,--timeout=200]"

}


//TODO: fix for chrome formatting having 2x the humidity rankings
//state checker: firefox (run normally) chrome after noon? (1st two normal, then skip over every other one) chrome morning (skip every other one)
OnForecastFound
{
	
	//file to be read
	_file = "var\\forecast.html"
	//line being read
	_buff=""
	//regular expressions to extract data
	_regdate=''
	_regdesc=''
	_reghigh=''
	_reglow=''
	_regprecip=''
	_regwind=''
	_reghumidity=''
	//using UTF-8 charset
	FCHARSET(1)
	
	//strings for holding and parsing each bit of data
	_singleday = (IARRAY, "")
	_temp = ""
	
	//jank
	_state = ""
	
	//2D array for forecast data
	//15 days? each day has (date, description, high,low, precip %, wind, humidity)
	forecastarray = (_singleday, _singleday)

	
	--
	
	if FOPEN(_file,'r') {
	
	
		_buff = FREAD(_file) //get the first line of the HTML to check what type of page we got
		temp = _buff
		
		if RE_SEARCH(_buff, '<html dir="ltr" lang="en-US"><head>') { //reg expressions for chrome formatted page
			_regdate='-daypartName--[\d|\w|_|-]*">([\w|\s]*)</h[\d]><div '
			_regdesc='extendedData--[\d|\w|_|-]*">([\w|\s]*)</span></div>'
			_reghigh='Summary-DetailsSummary--highTempValue--[\d|\w|_|-]*">(--|(-?\d*)).</span>'
			_reglow='Summary--lowTempValue--[\d|\w|_|-]*">(-?\d*)°</span'
			_regprecip='<span data-testid="PercentageValue">(\d*)%</span></div>'
			_regwind='[\d|\w|_|-]* undefined">([\w|\s]*)<!-- -->([\w|\s]*)</span></div>'
			_reghumidity='Details-DetailsTable-DetailsTable--value--[\d|\w|_|-]*">(\d*)%</span></div></li><li data-testid="uvIndexSection"'
		}
		else { 
			//reg expressions for firefox formatted page 
			_regdate='</div><span class="day-detail clearfix">([\w|\s]*)</span></div>'
			_regdesc='data-track-string="ls_24_hour_ls_24_hour_toggle" className="description"><span>([\w|\s]*)</span></td>'
			_reghigh='className="temp"><div><span class="">(--|(-?\d*))<sup>.</sup></span>'
			_reglow='<span class="slash" className="slash"></span><span class="">(-?\d*)<sup>.</sup></span></div>'
			_regprecip='icon-drop-1"></span><span class=""><span>(\d*)<span class="Percentage__percentSymbol__2Q_AR">.</span>'
			_regwind='className="wind"><span class="">([\w|\s]*)</span>'
			_reghumidity='className="humidity"><span class=""><span>(\d*)<span class="Percentage__percentSymbol__2Q_AR">'
			_state = "firefox"
		}
		
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
			

			//date
			//re_grep is used instead of re_search because re_grep will get all appearances of the regexpr on a line
			if RE_GREP( _buff, _regdate ) {
			
				//clear out singleday string, use a temp string to hold the results of the regexpr search 
				_singleday = NULL
				_temp = RE_GETSTR
				
				//strip out HTML bits using RE_SEARCH. comma is important to keep _singleday a pseudo-array
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regdate) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				//add singleday contents to relevant row of data in forecast array
				forecastarray[0] = forecastarray[0] + _singleday 
				
			} 
			
			//rinse and repeat for rest of data
			//desc
			if RE_GREP( _buff, _regdesc ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regdesc) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				forecastarray[1] = forecastarray[1] + _singleday 
				
			} 

			//high temps
			if RE_GREP( _buff, _reghigh ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _reghigh) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				forecastarray[2] = forecastarray[2] + _singleday 
				
			} 
			
			//low temps
			if RE_GREP( _buff, _reglow ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _reglow) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				forecastarray[3] = forecastarray[3] + _singleday 
				
			} 
			//precip
			if RE_GREP( _buff, _regprecip ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regprecip) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				forecastarray[4] = forecastarray[4] + _singleday 
				
			} 
	
			//wind
			if RE_GREP( _buff, _regwind ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regwind) {
						_singleday = _singleday + RE_GETSTR[1] + RE_GETSTR[2] + ","
					}
					
				
				}		
				
				forecastarray[5] = forecastarray[5] + _singleday 
				
			} 
			
			//this is gonna be the quirky section LOL 
			//humidity
			if RE_GREP( _buff, _reghumidity ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _reghumidity) {
						
						if _state == "firefox"  { //ff format is nice and doesnt have anything special 
						
							_singleday = _singleday + RE_GETSTR[1] + ","
						
						} elseif _state == "" { //state has not been set yet so we are in one of the weird chrome ones
						
							_singleday = _singleday + RE_GETSTR[1] + "," //take the first humidity we get to normally 
							
							if forecastarray[2][0] == "-" { 
							//indicates that first humidity was in the night stage of today's forecast, so we don't want to skip the next humidity
								_state = "chrome"								
							}
							else {
								_state = "chromeskip"
							}
							_singleday = NULL
						
						} elseif _state == "chrome" {
						
							_singleday = _singleday + RE_GETSTR[1] + "," 
							_state = "chromeskip"
						
						} else { //_state = chromeskip
							_state = "chrome"
						}
						//otherwise do nothing, essentially skipping this one 
						
					
						
					}
					
				
				}	
				
				forecastarray[6] = forecastarray[6] + _singleday 
				
			} 
		}
	}
	--
	
	FCLOSE(_file);
	
	"\0\s[8]\b2\f[bold,1]10 Day Forecast\f[bold,0] \n\n[half]\_q/
	
	%(forecastarray[0][0]): %(forecastarray[1][0])\n/
	H:%(forecastarray[2][0])°/L:%(forecastarray[3][0])°; Wind:%(forecastarray[5][0])\n/
	%(forecastarray[4][0])% chance of precipitation\nHumidity:%(forecastarray[6][0])%\n\n[half]/
	
	%(forecastarray[0][1]): %(forecastarray[1][1])\n/
	H:%(forecastarray[2][1])°/L:%(forecastarray[3][1])°; Wind:%(forecastarray[5][1])\n/
	%(forecastarray[4][1])% chance of precipitation\nHumidity:%(forecastarray[6][1])%\n\n[half]/
	
	%(forecastarray[0][2]): %(forecastarray[1][2])\n/
	H:%(forecastarray[2][2])°/L:%(forecastarray[3][2])°; Wind:%(forecastarray[5][2])\n/
	%(forecastarray[4][2])% chance of precipitation \nHumidity:%(forecastarray[6][2])%\n\n[half]/
	
	%(forecastarray[0][3]): %(forecastarray[1][3])\n/
	H:%(forecastarray[2][3])°/L:%(forecastarray[3][3])°; Wind:%(forecastarray[5][3])\n/
	%(forecastarray[4][3])% chance of precipitation\nHumidity:%(forecastarray[6][3])%\n\n[half]/
	
	%(forecastarray[0][4]): %(forecastarray[1][4])\n/
	H:%(forecastarray[2][4])°/L:%(forecastarray[3][4])°; Wind:%(forecastarray[5][4])\n/
	%(forecastarray[4][4])% chance of precipitation\nHumidity:%(forecastarray[6][4])%\n\n[half]/
	
	%(forecastarray[0][5]): %(forecastarray[1][5])\n/
	H:%(forecastarray[2][5])°/L:%(forecastarray[3][5])°; Wind:%(forecastarray[5][5])\n/
	%(forecastarray[4][5])% chance of precipitation\nHumidity:%(forecastarray[6][5])%\n\n[half]/
	
	%(forecastarray[0][6]): %(forecastarray[1][6])\n/
	H:%(forecastarray[2][6])°/L:%(forecastarray[3][6])°; Wind:%(forecastarray[5][6])\n/
	%(forecastarray[4][6])% chance of precipitation\nHumidity:%(forecastarray[6][6])%\n\n[half]/
	
	%(forecastarray[0][7]): %(forecastarray[1][7])\n/
	H:%(forecastarray[2][7])°/L:%(forecastarray[3][7])°; Wind:%(forecastarray[5][7])\n/
	%(forecastarray[4][7])% chance of precipitation\nHumidity:%(forecastarray[6][7])%\n\n[half]/
	
	%(forecastarray[0][8]): %(forecastarray[1][8])\n/
	H:%(forecastarray[2][8])°/L:%(forecastarray[3][8])°; Wind:%(forecastarray[5][8])\n/
	%(forecastarray[4][8])% chance of precipitation\nHumidity:%(forecastarray[6][8])%\n\n[half]/

	%(forecastarray[0][9]): %(forecastarray[1][9])\n/
	H:%(forecastarray[2][9])°/L:%(forecastarray[3][9])°; Wind:%(forecastarray[5][9])\n/
	%(forecastarray[4][9])% chance of precipitation\nHumidity:%(forecastarray[6][9])%"
	
	--
	"\n\n[half]Back to...\n\n[half]"
	--
	"\![*]\q[Weather menu,OnCheckWeather]\n/
	\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\x\e"
	

}

//

OnDownloadHourly{

	"\0\s[0]Downloading hourly forecast... \![execute,http-get,https://weather.com/weather/hourbyhour/l/%(locationcode),--async=OnHourlyFound,--file=hourly.html,--timeout=200]"

}

//basically copied over from the 10 day forecast function, since the two pages share some of the same data
OnHourlyFound
{
	
	//file to be read
	_file = "var\\hourly.html"
	//line being read
	_buff=""
	//regular expressions to extract data
	_reghour=''
	_regdesc=''
	_regtemp=''
	_regfeels=''
	_regprecip=''
	_regwind=''
	_reghumidity=''
	//using UTF-8 charset
	FCHARSET(1)
	
	//strings for holding and parsing each bit of data
	_singleday = (IARRAY, "")
	_temp = ""
	
	//2D array for forecast data
	//(hour, description, temp,feels like, precip %, wind, humidity)
	hourlyarray = (_singleday, _singleday)
	

	
	--
	
	if FOPEN(_file,'r') {
	
		_buff = FREAD(_file) //get the first line of the HTML to check what type of page we got
		temp = _buff
		
		if RE_SEARCH(_buff, '<html dir="ltr" lang="en-US"><head>') { //reg expressions for chrome formatted page
			_reghour='mmary-DetailsSummary--daypartName--[\d|\w|_|-]*">(\d* [p|a]m)</h[\d]><div data-te'
			_regdesc='y--extendedData--[\d|\w|_|-]*">([\w|\s]*)</span></div>'
			_regtemp='tailsSummary--tempValue--[\d|\w|_|-]*">(-?\d*)°</span></div><div data-testid="wxIcon'
			_regfeels='Feels Like</span><span data-testid="TemperatureValue" class="_-_-node_modules-@[-|\w]*">(-?\d*)°</span></div><'
			_regprecip='</svg><span data-testid="PercentageValue">(\d*)%</span></div><div data-testid="'
			_regwind='Wrapper--[\d|\w|_|-]* undefined">([\w|\s]*)<!-- -->([\w|\s]*)</span></div></'
			_reghumidity='-DetailsTable-DetailsTable--value--[\d|\w|_|-]*">(\d*)%</span></div></li><li data-testid="uvIndexSection"'
		}
		else { 
			//reg expressions for firefox formatted page 
			_reghour='<span class="dsx-date">(\d*:\d* [p|a]m)'
			_regdesc='className="hidden-cell-sm description"><span>([\w|\s]*)</span>'
			_regtemp='className="temp"><span class="">(-?\d*)<sup>'
			_regfeels='className="feels"><span class="">(-?\d*)<sup>'
			_regprecip='iconset-weather-data icon-drop-1"></span><span class=""><span>(\d*)<span class="Percentage__percentSymbol'
			_regwind='className="wind"><span class="">([\w|\s]*)</span>'
			_reghumidity='className="humidity"><span class=""><span>(\d*)<span class="Percentage__percentSymbol__2Q_AR">'
		}
	
	
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file) {
			

			//hour
			//re_grep is used instead of re_search because re_grep will get all appearances of the regexpr on a line
			if RE_GREP( _buff, _reghour ) {
			
				//clear out singleday string, use a temp string to hold the results of the regexpr search 
				_singleday = NULL
				_temp = RE_GETSTR
				
				//strip out HTML bits using RE_SEARCH. comma is important to keep _singleday a pseudo-array
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _reghour) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				//add singleday contents to relevant row of data in forecast array
				hourlyarray[0] = hourlyarray[0] + _singleday 
				
			} 
			
			//rinse and repeat for rest of data
			//desc
			if RE_GREP( _buff, _regdesc ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regdesc) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				hourlyarray[1] = hourlyarray[1] + _singleday 
				
			} 

			//temp
			if RE_GREP( _buff, _regtemp ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regtemp) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				hourlyarray[2] = hourlyarray[2] + _singleday 
				
			} 
			
			//feels like
			if RE_GREP( _buff, _regfeels ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regfeels) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				hourlyarray[3] = hourlyarray[3] + _singleday 
				
			} 
			//precip
			if RE_GREP( _buff, _regprecip ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regprecip) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				hourlyarray[4] = hourlyarray[4] + _singleday 
				
			} 
	
			//wind
			if RE_GREP( _buff, _regwind ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _regwind) {
						_singleday = _singleday + RE_GETSTR[1] + RE_GETSTR[2] + ","
					}
					
				
				}		
				
				hourlyarray[5] = hourlyarray[5] + _singleday 
				
			} 
			
			//humidity
			if RE_GREP( _buff, _reghumidity ) {
				
				_singleday = NULL
				_temp = RE_GETSTR
				
				for i = 0; i < ARRAYSIZE(_temp); i++ {
					
					if RE_SEARCH(_temp[i], _reghumidity) {
						_singleday = _singleday + RE_GETSTR[1] + ","
					}
					
				
				}		
				
				hourlyarray[6] = hourlyarray[6] + _singleday 
				
			} 
		}
	}
	--
	
	FCLOSE(_file);
	
	"\0\s[8]\b2\f[bold,1]Hourly Forecast\f[bold,0] \n\n[half]\_q/
	
	%(hourlyarray[0][0]): %(hourlyarray[1][0])\n/
	Temp:%(hourlyarray[2][0])°; Feels like:%(hourlyarray[3][0])°; \nWind:%(hourlyarray[5][0])\n/
	%(hourlyarray[4][0])% chance of precipitation\nHumidity:%(hourlyarray[6][0])%\n\n[half]/
	
	%(hourlyarray[0][1]): %(hourlyarray[1][1])\n/
	Temp:%(hourlyarray[2][1])°; Feels like:%(hourlyarray[3][1])°; \nWind:%(hourlyarray[5][1])\n/
	%(hourlyarray[4][1])% chance of precipitation\nHumidity:%(hourlyarray[6][1])%\n\n[half]/
	
	%(hourlyarray[0][2]): %(hourlyarray[1][2])\n/
	Temp:%(hourlyarray[2][2])°; Feels like:%(hourlyarray[3][2])°; \nWind:%(hourlyarray[5][2])\n/
	%(hourlyarray[4][2])% chance of precipitation \nHumidity:%(hourlyarray[6][2])%\n\n[half]/
	
	%(hourlyarray[0][3]): %(hourlyarray[1][3])\n/
	Temp:%(hourlyarray[2][3])°; Feels like:%(hourlyarray[3][3])°; \nWind:%(hourlyarray[5][3])\n/
	%(hourlyarray[4][3])% chance of precipitation\nHumidity:%(hourlyarray[6][3])%\n\n[half]/
	
	%(hourlyarray[0][4]): %(hourlyarray[1][4])\n/
	Temp:%(hourlyarray[2][4])°; Feels like:%(hourlyarray[3][4])°; \nWind:%(hourlyarray[5][4])\n/
	%(hourlyarray[4][4])% chance of precipitation\nHumidity:%(hourlyarray[6][4])%\n\n[half]/
	
	%(hourlyarray[0][5]): %(hourlyarray[1][5])\n/
	Temp:%(hourlyarray[2][5])°; Feels like::%(hourlyarray[3][5])°; \nWind:%(hourlyarray[5][5])\n/
	%(hourlyarray[4][5])% chance of precipitation\nHumidity:%(hourlyarray[6][5])%\n\n[half]/
	
	%(hourlyarray[0][6]): %(hourlyarray[1][6])\n/
	Temp:%(hourlyarray[2][6])°; Feels like:%(hourlyarray[3][6])°; \nWind:%(hourlyarray[5][6])\n/
	%(hourlyarray[4][6])% chance of precipitation\nHumidity:%(hourlyarray[6][6])%\n\n[half]/
	
	%(hourlyarray[0][7]): %(hourlyarray[1][7])\n/
	Temp:%(hourlyarray[2][7])°; Feels like:%(hourlyarray[3][7])°; \nWind:%(hourlyarray[5][7])\n/
	%(hourlyarray[4][7])% chance of precipitation\nHumidity:%(hourlyarray[6][7])%\n\n[half]/
	
	%(hourlyarray[0][8]): %(hourlyarray[1][8])\n/
	Temp:%(hourlyarray[2][8])°; Feels like:%(hourlyarray[3][8])°; \nWind:%(hourlyarray[5][8])\n/
	%(hourlyarray[4][8])% chance of precipitation\nHumidity:%(hourlyarray[6][8])%\n\n[half]/

	%(hourlyarray[0][9]): %(hourlyarray[1][9])\n/
	Temp:%(hourlyarray[2][9])°; Feels like:%(hourlyarray[3][9])°; \nWind:%(hourlyarray[5][9])\n/
	%(hourlyarray[4][9])% chance of precipitation\nHumidity:%(hourlyarray[6][9])%"
	
	--
	"\n\n[half]Back to...\n\n[half]"
	--
	"\![*]\q[Weather menu,OnCheckWeather]\n/
	\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\x\e"
	

}

OnDownloadMoonPhase
{
	"\0\s[0]Downloading moon phase... \![execute,http-get,https://www.moongiant.com/phase/today/,--async=OnMoonFound,--file=moon.html,--timeout=200]"

}

OnMoonFound{

	//file to be read
	_file = "var\\moon.html"
	//line being read
	_buff=""
	//regular expressions to extract data
	_regphase=',"Phase: <span>([\w|\s]*)<./span>'
	_found = 0;
	//using UTF-8 charset
	FCHARSET(1)
	
	//string for holding phase
	phase = ""
	

	
	--
	
	if FOPEN(_file,'r') {
		for _buff = FREAD(_file); _buff != -1 && !_found; _buff = FREAD(_file) {
			

			if RE_SEARCH ( _buff, _regphase ) {
				
				phase = RE_GETSTR[1]
				_found = 1; //break loop since we dont need to continue parsing
				
			} 
		}
	}
	--
	
	FCLOSE(_file);
	
	"\0\s[8]The moon is currently in its %(phase) phase."
	
	--
	"\n\n[half]Back to...\n\n[half]"
	--
	"\![*]\q[Weather menu,OnCheckWeather]\n/
	\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\x\e"

}

OnDownloadTest{

	"\0\s[0]Downloading moon phase... \![execute,http-get,https://www.timeanddate.com/sun/@z-us-15642,--async=OnDownloadFound,--file=test.html,--timeout=200]"
}

OnDownloadFound{


	//file to be read
	_file = "var\\test.html"
	//line being read
	_buff=""
	//regular expressions to extract data
	_regphase='four>Sunset Today: </span><span class=three>(\d*:\d* [p|a]m)</span>'
	_found = 0;
	//using UTF-8 charset
	FCHARSET(1)
	
	//string for holding phase
	_phase = ""
	

	
	--
	
	if FOPEN(_file,'r') {
		for _buff = FREAD(_file); _buff != -1 && !_found; _buff = FREAD(_file) {
			

			if RE_SEARCH ( _buff, _regphase ) {
				
				_phase = RE_GETSTR[1]
				_found = 1; //break loop since we dont need to continue parsing
				
			} 
		}
	}
	--
	
	FCLOSE(_file);
	
	"\0\s[8]The moon is currently in its %(_phase) phase."
	
	--
	"\n\n[half]Back to...\n\n[half]"
	--
	"\![*]\q[Weather menu,OnCheckWeather]\n/
	\![*]\q[Misc menu,OnMiscMenu]\n/
	\![*]\q[Main menu,OnBACKTOMENU]\x\e"
}